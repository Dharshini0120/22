"use client";
import React, { useState, useEffect, useMemo } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  TextField,
  InputAdornment,
  MenuItem,
  Autocomplete,
  IconButton,
  CircularProgress,
} from '@mui/material';
import {
  Person as PersonIcon,
  Email as EmailIcon,
  LocalPhone as PhoneIcon,
  Business as BusinessIcon,
  Language as LanguageIcon,
  Apartment as ApartmentIcon,
  Hotel as HotelIcon,
  MiscellaneousServices as ServiceIcon,
  Close as CloseIcon,
} from '@mui/icons-material';
// Note: GraphQL queries for facility types and service lines are not available in user portal
// Using mock data for now - these should be replaced with actual API calls

interface ProfileEditDialogProps {
  open: boolean;
  onClose: () => void;
  currentData: {
    fullName: string;
    email: string;
    phoneNumber: string;
    facilityName: string;
    facilityType: string;
    county: string;
    state: string;
    serviceLines: string;
    numberOfBeds: string;
  };
  onUpdate: (data: {
    fullName: string;
    email: string;
    phoneNumber: string;
    facilityName: string;
    facilityType: string;
    county: string;
    state: string;
    serviceLines: string;
    numberOfBeds: string;
  }) => void;
}

interface FormState {
  fullName: string;
  email: string;
  phone: string;
  facilityName: string;
  facilityType: string;
  state: string;
  county: string;
  beds: string;
  serviceLine: string[];
}

interface FormErrors {
  [key: string]: string;
}

const ProfileEditDialog: React.FC<ProfileEditDialogProps> = ({
  open,
  onClose,
  currentData,
  onUpdate,
}) => {
  const [form, setForm] = useState<FormState>({
    fullName: '',
    email: '',
    phone: '',
    facilityName: '',
    facilityType: '',
    state: '',
    county: '',
    beds: '',
    serviceLine: [],
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [loading, setLoading] = useState(false);
  const [states, setStates] = useState<string[]>([]);
  const [counties, setCounties] = useState<string[]>([]);

  // Initialize form with current data when dialog opens
  useEffect(() => {
    if (open && currentData) {
      setForm({
        fullName: currentData.fullName || '',
        email: currentData.email || '',
        phone: currentData.phoneNumber || '',
        facilityName: currentData.facilityName || '',
        facilityType: currentData.facilityType || '',
        state: currentData.state || '',
        county: currentData.county || '',
        beds: currentData.numberOfBeds || '',
        serviceLine: currentData.serviceLines ? currentData.serviceLines.split(', ') : [],
      });
    }
  }, [open, currentData]);

  // Load states and counties data
  useEffect(() => {
    // Mock data for states and counties - you can replace with actual API calls
    setStates(['Texas', 'California', 'New York', 'Florida', 'Illinois']);
    setCounties(['Austin', 'Houston', 'Dallas', 'San Antonio', 'Fort Worth']);
  }, []);

  // Mock data for facility types and service lines
  // TODO: Replace with actual API calls when available
  const facilityTypes: Array<{id: string, name: string}> = useMemo(() => [
    { id: '1', name: 'Academic Hospital' },
    { id: '2', name: 'Community Hospital' },
    { id: '3', name: 'Critical Access Hospital' },
    { id: '4', name: 'Specialty Hospital' },
    { id: '5', name: 'Rehabilitation Hospital' },
  ], []);

  const serviceLines: Array<{id: string, name: string}> = useMemo(() => {
    // Mock service lines based on facility type
    const mockServiceLines: Record<string, Array<{id: string, name: string}>> = {
      '1': [ // Academic Hospital
        { id: '1', name: 'Emergency Medicine' },
        { id: '2', name: 'Cardiology' },
        { id: '3', name: 'Oncology' },
        { id: '4', name: 'Neurology' },
        { id: '5', name: 'Pediatrics' },
      ],
      '2': [ // Community Hospital
        { id: '6', name: 'Emergency Medicine' },
        { id: '7', name: 'Internal Medicine' },
        { id: '8', name: 'Surgery' },
        { id: '9', name: 'Obstetrics' },
      ],
      '3': [ // Critical Access Hospital
        { id: '10', name: 'Emergency Medicine' },
        { id: '11', name: 'Primary Care' },
      ],
      '4': [ // Specialty Hospital
        { id: '12', name: 'Cardiac Surgery' },
        { id: '13', name: 'Orthopedics' },
      ],
      '5': [ // Rehabilitation Hospital
        { id: '14', name: 'Physical Therapy' },
        { id: '15', name: 'Occupational Therapy' },
        { id: '16', name: 'Speech Therapy' },
      ],
    };
    
    return mockServiceLines[form.facilityType] || [];
  }, [form.facilityType]);

  const validateField = (name: string, value: string | string[]): string => {
    switch (name) {
      case 'fullName':
        return !value ? 'Full name is required' : '';
      case 'email':
        return !value ? 'Email is required' : !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value as string) ? 'Invalid email format' : '';
      case 'phone':
        return !value ? 'Phone number is required' : '';
      case 'facilityName':
        return !value ? 'Facility name is required' : '';
      case 'facilityType':
        return !value ? 'Facility type is required' : '';
      case 'state':
        return !value ? 'State is required' : '';
      case 'county':
        return !value ? 'County is required' : '';
      case 'beds':
        return !value ? 'Number of beds is required' : '';
      default:
        return '';
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: '' }));
    }
  };

  const handleSelectChange = (name: string, value: string) => {
    setForm((prev) => ({
      ...prev,
      [name]: value,
      ...(name === 'state' ? { county: '' } : null),
      ...(name === 'facilityType' ? { serviceLine: [] } : null)
    }));
  };

  const handleServiceLineChange = (event: React.SyntheticEvent, newValue: Array<{value: string, label: string}>) => {
    setForm((prev) => ({ ...prev, serviceLine: newValue.map(item => item.value) }));
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    setErrors((prev) => ({
      ...prev,
      [e.target.name]: validateField(e.target.name, e.target.value),
    }));
  };

  const validateForm = () => {
    const next: FormErrors = {};
    (Object.keys(form) as (keyof FormState)[]).forEach(
      (k) => (next[k] = validateField(k, form[k]))
    );
    setErrors(next);
    return Object.values(next).every((v) => !v);
  };

  const isFormValid = 
    !!form.fullName &&
    !!form.email &&
    !!form.phone &&
    !!form.facilityName &&
    !!form.facilityType &&
    !!form.state &&
    !!form.county &&
    !!form.beds;

  const handleUpdate = async () => {
    if (!validateForm()) return;

    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const updatedData = {
        fullName: form.fullName,
        email: form.email,
        phoneNumber: form.phone,
        facilityName: form.facilityName,
        facilityType: form.facilityType,
        state: form.state,
        county: form.county,
        serviceLines: form.serviceLine.join(', '),
        numberOfBeds: form.beds,
      };

      onUpdate(updatedData);
      onClose();
    } catch (error) {
      console.error('Error updating profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderField = (
    name: keyof FormState,
    label: string,
    placeholder: string,
    icon: React.ReactNode,
    options?: Array<{value: string, label: string}> | string[],
    isMultiSelect?: boolean
  ) => {
    const value = form[name];
    const error = errors[name];

    if (isMultiSelect && name === 'serviceLine') {
      return (
        <Autocomplete
          multiple
          options={serviceLines.map(sl => ({ value: sl.id, label: sl.name }))}
          value={serviceLines.filter(sl => form.serviceLine.includes(sl.id)).map(sl => ({ value: sl.id, label: sl.name }))}
          onChange={handleServiceLineChange}
          getOptionLabel={(option) => option.label}
          isOptionEqualToValue={(option, value) => option.value === value.value}
          renderInput={(params) => (
            <TextField
              {...params}
              label={label}
              placeholder={placeholder}
              error={!!error}
              helperText={error}
              InputProps={{
                ...params.InputProps,
                startAdornment: (
                  <InputAdornment position="start" sx={{ pr: 0.5 }}>
                    {icon}
                    <Box sx={{ height: 28, width: 1.3, bgcolor: '#b0b0b0', ml: 1 }} />
                  </InputAdornment>
                ),
              }}
              InputLabelProps={{
                shrink: true,
                sx: {
                  fontSize: '0.95rem',
                  color: '#9ca3af',
                  '&.Mui-focused': { color: '#9ca3af' },
                  transform: 'translate(14px, 16px) scale(1)',
                  '&.MuiInputLabel-shrink': {
                    transform: 'translate(14px, -8px) scale(0.85)',
                    backgroundColor: '#fff',
                    px: 0.5,
                  },
                },
              }}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: '12px',
                  backgroundColor: '#fff',
                  fontSize: '1rem',
                  minHeight: '56px',
                  '& fieldset': { borderColor: error ? '#d32f2f' : '#a8a8a8' },
                  '&:hover fieldset': { borderColor: error ? '#d32f2f' : '#808080' },
                  '&.Mui-focused fieldset': { borderColor: error ? '#d32f2f' : '#4285F4' },
                },
                '& .MuiOutlinedInput-input': { padding: '14px 10px' },
              }}
            />
          )}
        />
      );
    }

    if (options) {
      return (
        <TextField
          select
          name={name}
          value={value}
          label={label}
          placeholder={placeholder}
          fullWidth
          error={!!error}
          helperText={error}
          onChange={(e) => handleSelectChange(name, e.target.value)}
          onBlur={handleBlur}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start" sx={{ pr: 0.5 }}>
                {icon}
                <Box sx={{ height: 28, width: 1.3, bgcolor: '#b0b0b0', ml: 1 }} />
              </InputAdornment>
            ),
          }}
          InputLabelProps={{
            shrink: true,
            sx: {
              fontSize: '0.95rem',
              color: '#9ca3af',
              '&.Mui-focused': { color: '#9ca3af' },
              transform: 'translate(14px, 16px) scale(1)',
              '&.MuiInputLabel-shrink': {
                transform: 'translate(14px, -8px) scale(0.85)',
                backgroundColor: '#fff',
                px: 0.5,
              },
            },
          }}
          sx={{
            '& .MuiOutlinedInput-root': {
              borderRadius: '12px',
              backgroundColor: '#fff',
              fontSize: '1rem',
              minHeight: '56px',
              '& fieldset': { borderColor: error ? '#d32f2f' : '#a8a8a8' },
              '&:hover fieldset': { borderColor: error ? '#d32f2f' : '#808080' },
              '&.Mui-focused fieldset': { borderColor: error ? '#d32f2f' : '#4285F4' },
            },
            '& .MuiOutlinedInput-input': { padding: '14px 10px' },
          }}
        >
          {options.map((option) => (
            <MenuItem key={option.value || option} value={option.value || option}>
              {option.label || option}
            </MenuItem>
          ))}
        </TextField>
      );
    }

    return (
      <TextField
        name={name}
        value={value}
        label={label}
        placeholder={placeholder}
        fullWidth
        error={!!error}
        helperText={error}
        onChange={handleInputChange}
        onBlur={handleBlur}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start" sx={{ pr: 0.5 }}>
              {icon}
              <Box sx={{ height: 28, width: 1.3, bgcolor: '#b0b0b0', ml: 1 }} />
            </InputAdornment>
          ),
        }}
        InputLabelProps={{
          shrink: true,
          sx: {
            fontSize: '0.95rem',
            color: '#9ca3af',
            '&.Mui-focused': { color: '#9ca3af' },
            transform: 'translate(14px, 16px) scale(1)',
            '&.MuiInputLabel-shrink': {
              transform: 'translate(14px, -8px) scale(0.85)',
              backgroundColor: '#fff',
              px: 0.5,
            },
          },
        }}
        sx={{
          '& .MuiOutlinedInput-root': {
            borderRadius: '12px',
            backgroundColor: '#fff',
            fontSize: '1rem',
            minHeight: '56px',
            '& fieldset': { borderColor: error ? '#d32f2f' : '#a8a8a8' },
            '&:hover fieldset': { borderColor: error ? '#d32f2f' : '#808080' },
            '&.Mui-focused fieldset': { borderColor: error ? '#d32f2f' : '#4285F4' },
          },
          '& .MuiOutlinedInput-input': { padding: '14px 10px' },
        }}
      />
    );
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: '16px',
          maxHeight: '90vh',
        },
      }}
    >
      <DialogTitle sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        pb: 1,
        borderBottom: '1px solid #e4e5e7',
        fontWeight: 600,
        fontFamily: 'var(--font-inter), sans-serif',
        color: '#1a1a1a',
        fontSize: '1.5rem'
      }}>
        Edit Profile
        <IconButton onClick={onClose} sx={{ color: '#6b7280' }}>
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent sx={{ p: 3 }}>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2.5 }}>
          {/* Personal Information Section */}
          <Typography
            variant="h6"
            fontWeight={600}
            fontFamily={'var(--font-inter), sans-serif'}
            sx={{ color: '#1a1a1a', mb: 1 }}
          >
            Personal Information
          </Typography>

          <Box display="flex" flexDirection={{ xs: 'column', md: 'row' }} gap={2}>
            {renderField('fullName', 'Full Name', 'Enter your full name', <PersonIcon fontSize="small" style={{ opacity: 0.7 }} />)}
            {renderField('email', 'Email Address', 'Enter your email', <EmailIcon fontSize="small" style={{ opacity: 0.7 }} />)}
          </Box>

          <Box display="flex" flexDirection={{ xs: 'column', md: 'row' }} gap={2}>
            {renderField('phone', 'Phone Number', 'Enter your phone number', <PhoneIcon fontSize="small" style={{ opacity: 0.7 }} />)}
            {renderField('facilityName', 'Facility Name', 'Enter facility name', <BusinessIcon fontSize="small" style={{ opacity: 0.7 }} />)}
          </Box>

          {/* Facility Information Section */}
          <Typography
            variant="h6"
            fontWeight={600}
            fontFamily={'var(--font-inter), sans-serif'}
            sx={{ color: '#1a1a1a', mb: 1, mt: 2 }}
          >
            Facility Information
          </Typography>

          <Box display="flex" flexDirection={{ xs: 'column', md: 'row' }} gap={2}>
            {renderField('facilityType', 'Facility Type', 'Select Facility Type', <ApartmentIcon fontSize="small" style={{ opacity: 0.7 }} />, facilityTypes.map(ft => ({ value: ft.id, label: ft.name })))}
            {renderField('state', 'State', 'Select State', <LanguageIcon fontSize="small" style={{ opacity: 0.7 }} />, states)}
          </Box>

          <Box display="flex" flexDirection={{ xs: 'column', md: 'row' }} gap={2}>
            {renderField('county', 'County', 'Select County', <LanguageIcon fontSize="small" style={{ opacity: 0.7 }} />, counties)}
            {renderField('beds', 'Number of Licensed Beds', 'Enter number of beds', <HotelIcon fontSize="small" style={{ opacity: 0.7 }} />)}
          </Box>

          {renderField(
            'serviceLine',
            'What service lines exist at your Facility',
            'Choose Facility Service Line',
            <ServiceIcon fontSize="small" style={{ opacity: 0.7 }} />,
            serviceLines.map(sl => ({ value: sl.id, label: sl.name })),
            true
          )}
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 3, pt: 1, borderTop: '1px solid #e4e5e7' }}>
        <Button
          onClick={onClose}
          variant="outlined"
          sx={{
            textTransform: 'none',
            letterSpacing: '0.5px',
            fontWeight: 500,
            fontFamily: 'var(--font-inter), sans-serif',
            borderRadius: '8px',
            padding: '10px 24px',
            borderColor: '#d1d5db',
            color: '#6b7280',
            '&:hover': {
              borderColor: '#9ca3af',
              backgroundColor: '#f9fafb',
            }
          }}
        >
          Cancel
        </Button>
        <Button
          onClick={handleUpdate}
          variant="contained"
          disabled={!isFormValid || loading}
          sx={{
            background: 'linear-gradient(90deg, #408bff 0%, #3a7de6 100%)',
            textTransform: 'none',
            letterSpacing: '0.5px',
            fontWeight: 500,
            fontFamily: 'var(--font-inter), sans-serif',
            borderRadius: '8px',
            padding: '10px 24px',
            boxShadow: '0 2px 8px rgba(64, 139, 255, 0.3)',
            '&:hover': {
              background: 'linear-gradient(90deg, #3a7de6 0%, #2968d4 100%)',
              boxShadow: '0 4px 12px rgba(64, 139, 255, 0.4)',
            },
            '&:disabled': {
              background: '#e5e7eb',
              color: '#9ca3af',
              boxShadow: 'none',
            }
          }}
        >
          {loading ? (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <CircularProgress size={16} color="inherit" />
              Updating...
            </Box>
          ) : (
            'Update Profile'
          )}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ProfileEditDialog;
