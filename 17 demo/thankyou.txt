import React from 'react';
import {
  Box,
  Button,
  Dialog,
  DialogContent,
  Paper,
  Typography,
  SxProps,
  Theme,
  CircularProgress
} from '@mui/material';
import { useMutation } from '@apollo/client';
import { toast } from 'react-toastify';
import { 
  GENERATE_ASSESSMENT_REPORT, 
  SEND_REPORT_EMAIL 
} from '../../graphql/templates.service';

export interface ThankYouScreenProps {
  /**
   * Whether to display as a full-screen layout (for checkout) or dialog (for assessment page)
   */
  variant?: 'fullscreen' | 'dialog';
  
  /**
   * Title of the success message
   */
  title?: string;
  
  /**
   * Description text with optional section name
   */
  description?: string;
  sectionName?: string;
  
  /**
   * Assessment ID for downloading the report
   */
  assessmentId?: string;
  
  /**
   * Whether to show action buttons (Download Report, Email Report)
   */
  showActionButtons?: boolean;
  
  /**
   * Whether to show the back to dashboard button
   */
  showBackButton?: boolean;
  
  /**
   * Custom text for the back button
   */
  backButtonText?: string;
  
  /**
   * Callback for download report action (optional - will use API if assessmentId is provided)
   */
  onDownloadReport?: () => void;
  
  /**
   * Callback for email report action
   */
  onEmailReport?: () => void;
  
  /**
   * Callback for back button action
   */
  onBack?: () => void;
  
  /**
   * Whether the dialog is open (only used when variant is 'dialog')
   */
  open?: boolean;
  
  /**
   * Custom styles for the container
   */
  sx?: SxProps<Theme>;
}

const ThankYouScreen: React.FC<ThankYouScreenProps> = ({
  variant = 'fullscreen',
  title = 'Thank You! Your Access is Unlocked.',
  description = 'You now have full access to all report features',
  sectionName,
  assessmentId,
  showActionButtons = true,
  showBackButton = true,
  backButtonText = 'Back to Dashboard',
  onDownloadReport,
  onEmailReport,
  onBack,
  open = true,
  sx
}) => {
  const [generateAssessmentReport, { loading: downloadLoading }] = useMutation(
    GENERATE_ASSESSMENT_REPORT
  );

  const [sendReportEmail, { loading: emailLoading }] = useMutation(
    SEND_REPORT_EMAIL
  );

  const handleDownloadReport = async () => {
    if (onDownloadReport) {
      onDownloadReport();
      return;
    }

    try {
      const result = await generateAssessmentReport({
        variables: {
          input: {
            assessmentId: assessmentId
          }
        }
      });

      if (result.data?.generateAssessmentReport.status === 'success') {
        const reportUrl = result.data.generateAssessmentReport.reportUrl;
        
        // Create a temporary link to trigger download
        const link = document.createElement('a');
        link.href = reportUrl;
        link.download = `assessment-report-${assessmentId}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        toast.success('Report downloaded successfully!');
      } else {
        toast.error(result.data?.generateAssessmentReport.message || 'Failed to download report');
      }
    } catch (error) {
      console.error('Download error:', error);
      toast.error('Failed to download report. Please try again.');
    }
  };

  const handleEmailReport = async () => {
    if (onEmailReport) {
      onEmailReport();
      return;
    }

    console.log('Sending email report for assessment:', assessmentId);
    
    try {
      const result = await sendReportEmail({
        variables: {
          input: {
            assessmentId: assessmentId
          }
        }
      });

      console.log('Email report result:', result);

      if (result.data?.sendReportEmail.status === 'success') {
        toast.success('Report sent to email successfully!');
      } else {
        toast.error(result.data?.sendReportEmail.message || 'Failed to send report to email');
      }
    } catch (error) {
      console.error('Email error:', error);
      toast.error('Failed to send report to email. Please try again.');
    }
  };

  const successIcon = (
    <Box sx={{
      width: 80,
      height: 80,
      borderRadius: '50%',
      backgroundColor: '#f0f9ff',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      mx: 'auto',
      mb: 3
    }}>
      <Box sx={{
        width: 40,
        height: 40,
        borderRadius: '50%',
        backgroundColor: '#408bff',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'white',
        fontSize: '24px',
        fontWeight: 'bold'
      }}>
        ✓
      </Box>
    </Box>
  );

  const titleElement = (
    <Typography 
      variant="h4" 
      sx={{ 
        fontWeight: 700,
        color: '#1a1a1a',
        mb: 3,
        fontSize: '28px',
        fontFamily: 'var(--font-inter), sans-serif'
      }}
    >
      {title}
    </Typography>
  );

  const descriptionElement = (
    <Typography 
      variant="body1" 
      sx={{ 
        color: '#6b7280',
        fontSize: '16px',
        fontFamily: 'var(--font-inter), sans-serif',
        lineHeight: 1.6,
        mb: 4
      }}
    >
      {sectionName ? (
        <>
          {description} for <strong>{sectionName}</strong>, including a detailed scoring breakdown and benchmark comparisons.
        </>
      ) : (
        <>
          {description}, including a detailed scoring breakdown and benchmark comparisons.
        </>
      )}
    </Typography>
  );

  const actionButtons = showActionButtons && (
    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
      <Button
        variant="outlined"
        onClick={handleDownloadReport}
        disabled={downloadLoading}
        startIcon={
          downloadLoading ? (
            <CircularProgress size={16} color="inherit" />
          ) : (
            <Box sx={{ width: 16, height: 16, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>↓</Box>
          )
        }
        sx={{
          borderColor: '#408bff',
          color: '#408bff',
          textTransform: 'none',
          fontSize: '14px',
          fontFamily: 'var(--font-inter), sans-serif',
          fontWeight: 500,
          borderRadius: '8px',
          padding: '12px 24px',
          '&:hover': {
            borderColor: '#3574e0',
            backgroundColor: 'rgba(64, 139, 255, 0.04)'
          },
          '&:disabled': {
            borderColor: '#d1d5db',
            color: '#9ca3af'
          }
        }}
      >
        {downloadLoading ? 'Downloading...' : 'Download Report'}
      </Button>
      
      <Button
        variant="contained"
        onClick={handleEmailReport}
        disabled={emailLoading}
        startIcon={emailLoading ? <CircularProgress size={16} color="inherit" /> : <Box sx={{ width: 16, height: 16, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>✉</Box>}
        sx={{
          backgroundColor: '#408bff',
          color: 'white',
          textTransform: 'none',
          fontSize: '14px',
          fontFamily: 'var(--font-inter), sans-serif',
          fontWeight: 500,
          borderRadius: '8px',
          padding: '12px 24px',
          boxShadow: 'none',
          '&:hover': {
            backgroundColor: '#3574e0',
            boxShadow: 'none'
          },
          '&:disabled': {
            backgroundColor: '#9ca3af',
            color: 'white'
          }
        }}
      >
        {emailLoading ? 'Sending...' : 'Email Report'}
      </Button>
    </Box>
  );

  const backButton = showBackButton && (
    <Box sx={{ mt: 4, pt: 3, borderTop: '1px solid #e9ecef' }}>
      <Button
        variant="text"
        onClick={onBack}
        sx={{
          color: '#408bff',
          textTransform: 'none',
          fontSize: '14px',
          fontFamily: 'var(--font-inter), sans-serif',
          fontWeight: 500,
          padding: '8px 16px',
          '&:hover': {
            backgroundColor: 'rgba(64, 139, 255, 0.04)'
          }
        }}
      >
        {backButtonText}
      </Button>
    </Box>
  );

  const content = (
    <>
      {successIcon}
      {titleElement}
      {descriptionElement}
      {actionButtons}
      {backButton}
    </>
  );

  if (variant === 'dialog') {
    return (
      <Dialog
        open={open}
        onClose={onBack}
        maxWidth="sm"
        fullWidth
        sx={{
          '& .MuiDialog-paper': {
            borderRadius: '16px',
            boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
            border: '1px solid #e9ecef',
            maxWidth: '600px',
            width: '100%',
            mx: 'auto'
          },
          ...sx
        }}
      >
        <DialogContent sx={{ p: 6, textAlign: 'center' }}>
          {content}
        </DialogContent>
      </Dialog>
    );
  }

  // Fullscreen variant
  return (
    <Box sx={{ 
      minHeight: '100vh', 
      backgroundColor: '#f5f5f5',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '100vw',
      maxWidth: '100vw',
      px: 2,
      margin: 0,
      paddingLeft: 2,
      paddingRight: 2,
      ...sx
    }}>
      <Paper sx={{ 
        p: 6, 
        borderRadius: '16px',
        boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
        backgroundColor: '#fff',
        border: '1px solid #e9ecef',
        maxWidth: '600px',
        minWidth: '320px',
        width: 'calc(100vw - 32px)',
        mx: 'auto',
        textAlign: 'center'
      }}>
        {content}
      </Paper>
    </Box>
  );
};

export default ThankYouScreen;
